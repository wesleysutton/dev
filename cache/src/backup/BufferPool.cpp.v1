#include "BufferPool.h"

#include <set>
#include <algorithm>    // std::lower_bound, std::upper_bound, std::sort
#include <boost/lockfree/queue.hpp>
#include "Buffer.h"

using namespace std;
using namespace boost;

namespace // anonymous
{

struct SizeComparator
{
    bool operator()(const Buffer* a, const Buffer* b) const
    {
        return (a->size() < b->size());
    }
};

typedef multiset<Buffer*, SizeComparator> BufferCache;

static BufferPool _instance;
static BufferCache _buffers;
    
static void release(Buffer* buffer)
{
    assert(buffer);
    _buffers.insert(buffer);
}

} // anonymous namespace


BufferPool& BufferPool::instance()
{
    return _instance;
}

Buffer::Ptr BufferPool::acquire(size_t bytes)
{
    Buffer* buffer = NULL;

    BufferCache::iterator it = _buffers.lower_bound(bytes);

    if (it == _buffers.end())
    {
        buffer = new Buffer(bytes);
    }
    else
    {
        buffer = *it;
        _buffers.erase(it);
    }

    return Buffer::Ptr(buffer, ::release);
}
